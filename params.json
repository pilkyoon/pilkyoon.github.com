{
  "name": "Pilkyoon.GitHub.com",
  "tagline": "",
  "body": "```java\r\npilkyoonium\r\n@NoRepositoryBean\r\npublic interface JpaRepository<T, ID extends Serializable> extends PagingAndSortingRepository<T, ID> {\r\n\r\n\t/*\r\n\t * (non-Javadoc)\r\n\t * @see org.springframework.data.repository.CrudRepository#findAll()\r\n\t */\r\n\tList<T> findAll();\r\n\r\n\t/*\r\n\t * (non-Javadoc)\r\n\t * @see org.springframework.data.repository.PagingAndSortingRepository#findAll(org.springframework.data.domain.Sort)\r\n\t */\r\n\tList<T> findAll(Sort sort);\r\n\r\n\t/*\r\n\t * (non-Javadoc)\r\n\t * @see org.springframework.data.repository.CrudRepository#findAll(java.lang.Iterable)\r\n\t */\r\n\tList<T> findAll(Iterable<ID> ids);\r\n\r\n\t/*\r\n\t * (non-Javadoc)\r\n\t * @see org.springframework.data.repository.CrudRepository#save(java.lang.Iterable)\r\n\t */\r\n\t<S extends T> List<S> save(Iterable<S> entities);\r\n\r\n\t/**\r\n\t * Flushes all pending changes to the database.\r\n\t */\r\n\tvoid flush();\r\n\r\n\t/**\r\n\t * Saves an entity and flushes changes instantly.\r\n\t * \r\n\t * @param entity\r\n\t * @return the saved entity\r\n\t */\r\n\t<S extends T> S saveAndFlush(S entity);\r\n\r\n\t/**\r\n\t * Deletes the given entities in a batch which means it will create a single {@link Query}. Assume that we will clear\r\n\t * the {@link javax.persistence.EntityManager} after the call.\r\n\t * \r\n\t * @param entities\r\n\t */\r\n\tvoid deleteInBatch(Iterable<T> entities);\r\n\r\n\t/**\r\n\t * Deletes all entites in a batch call.\r\n\t */\r\n\tvoid deleteAllInBatch();\r\n\r\n\t/**\r\n\t * Returns a reference to the entity with the given identifier.\r\n\t * \r\n\t * @param id must not be {@literal null}.\r\n\t * @return a reference to the entity with the given identifier.\r\n\t * @see EntityManager#getReference(Class, Object)\r\n\t */\r\n\tT getOne(ID id);\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}